---
import Pagination from "@components/Pagination.astro";
import {
  faArchive,
  faLayerGroup,
  faList,
  faMagnifyingGlass,
  faXmark,
} from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import BaseLayout from "@layouts/BaseLayout.astro";
import type { PostEntry } from "@lib/types";
import { getCollection } from "astro:content";

// Define the paths that will be generated
export async function getStaticPaths() {
  const allPosts = await getCollection("posts");
  const filteredPosts = allPosts
    .filter((post: PostEntry) => !post.data.draft && !post.data.archived)
    .sort(
      (a: PostEntry, b: PostEntry) =>
        new Date(b.data.date).getTime() - new Date(a.data.date).getTime(),
    );

  const postsPerPage = 5;
  const totalPages = Math.ceil(filteredPosts.length / postsPerPage);

  // Generate pages starting from page 2 (page 1 is handled by index.astro)
  return Array.from({ length: totalPages - 1 }).map((_, i) => {
    const pageNum = i + 2; // Start from page 2
    return {
      params: { page: pageNum.toString() },
      props: {
        page: pageNum,
        posts: filteredPosts.slice(
          (pageNum - 1) * postsPerPage,
          pageNum * postsPerPage,
        ),
        totalPosts: filteredPosts.length,
        allPosts: filteredPosts,
      },
    };
  });
}

// Get parameters from the route
const { page: currentPage, posts, totalPosts, allPosts } = Astro.props;
const postsPerPage = 5;
const totalPages = Math.ceil(totalPosts / postsPerPage);

// Get all blog posts for extracting tags
const allBlogPosts = await getCollection("posts");

// Extract all unique tags from posts
const allTags = [
  ...new Set(
    allBlogPosts
      .filter((post: PostEntry) => !post.data.draft && !post.data.archived)
      .flatMap((post: PostEntry) => (post.data.keywords || []) as string[]),
  ),
].sort() as string[];
---

<BaseLayout title="Blog Posts" description="Collection of blog posts">
  <div class="posts-header">
    <h1 class="page-title">Blog Posts</h1>
    <div class="header-actions">
      <button
        id="view-toggle"
        class="view-toggle"
        title="Toggle view mode"
        aria-label="Toggle between paginated and all posts view"
      >
        <FontAwesomeIcon icon={faLayerGroup} id="pagination-icon" />
        <FontAwesomeIcon
          icon={faList}
          id="all-icon"
          style={{ display: "none" }}
        />
        <span id="view-label">View All</span>
      </button>
      <a href="/archive" class="archive-link">
        <FontAwesomeIcon icon={faArchive} /> View Archive
      </a>
    </div>
  </div>

  <div class="filters-container">
    <div class="search-container">
      <form id="search-form">
        <input
          type="text"
          name="q"
          id="search-input"
          placeholder="Search posts..."
          aria-label="Search posts"
        />
        <button type="submit" class="search-button" id="search-button">
          <FontAwesomeIcon icon={faMagnifyingGlass} />
        </button>
        <button
          type="button"
          class="clear-search"
          id="clear-search"
          style="display: none;"
        >
          <FontAwesomeIcon icon={faXmark} />
        </button>
      </form>
    </div>

    <div class="tags-container">
      <div class="tags-wrap">
        <button type="button" class="tag-filter" data-tag=""> All </button>

        {
          allTags.map((tag) => (
            <button type="button" class="tag-filter" data-tag={tag}>
              {tag}
            </button>
          ))
        }
      </div>
    </div>
  </div>

  <ul class="post-list">
    {
      posts.map((post: PostEntry) => (
        <li
          class="post-dropdown-item"
          data-keywords={post.data.keywords?.join(",")}
        >
          <a href={`/posts/${post.id}`} class="dropdown-link">
            <div class="post-content">
              <div class="post-header">
                <h2 class="post-title">{post.data.title}</h2>
                {post.data.keywords && post.data.keywords.length > 0 && (
                  <div class="post-tags">
                    {post.data.keywords.map((tag: string) => (
                      <span class="post-tag">{tag}</span>
                    ))}
                  </div>
                )}
              </div>
              <time datetime={post.data.date.toISOString()} class="post-date">
                {new Date(post.data.date).toLocaleDateString("en-US", {
                  year: "numeric",
                  month: "long",
                  day: "numeric",
                })}
              </time>
              {post.data.description && (
                <p class="post-description">{post.data.description}</p>
              )}
            </div>
          </a>
        </li>
      ))
    }
  </ul>

  <ul class="post-list-all" style="display: none;">
    {
      allPosts.map((post: PostEntry) => (
        <li
          class="post-dropdown-item"
          data-keywords={post.data.keywords?.join(",")}
        >
          <a href={`/posts/${post.id}`} class="dropdown-link">
            <div class="post-content">
              <div class="post-header">
                <h2 class="post-title">{post.data.title}</h2>
                {post.data.keywords && post.data.keywords.length > 0 && (
                  <div class="post-tags">
                    {post.data.keywords.map((tag: string) => (
                      <span class="post-tag">{tag}</span>
                    ))}
                  </div>
                )}
              </div>
              <time datetime={post.data.date.toISOString()} class="post-date">
                {new Date(post.data.date).toLocaleDateString("en-US", {
                  year: "numeric",
                  month: "long",
                  day: "numeric",
                })}
              </time>
              {post.data.description && (
                <p class="post-description">{post.data.description}</p>
              )}
            </div>
          </a>
        </li>
      ))
    }
  </ul>

  <div class="no-results" style="display: none;">
    <FontAwesomeIcon icon={faMagnifyingGlass} className="search-icon" />
    <p>No posts found matching your criteria</p>
    <button type="button" id="reset-filters" class="reset-filters">
      Reset filters
    </button>
  </div>

  <div id="pagination-container">
    <Pagination
      currentPage={currentPage}
      totalPages={totalPages}
      baseUrl="/posts"
    />
  </div>
</BaseLayout>

<script>
  import PostSearchState from "../../scripts/post-search-state";

  document.addEventListener("DOMContentLoaded", () => {
    // Get all DOM elements with proper type casting
    const searchInput = document.getElementById(
      "search-input",
    ) as HTMLInputElement;
    const searchForm = document.getElementById(
      "search-form",
    ) as HTMLFormElement;
    const clearButton = document.getElementById(
      "clear-search",
    ) as HTMLButtonElement;
    const resetButton = document.getElementById(
      "reset-filters",
    ) as HTMLButtonElement;
    const tagButtons = document.querySelectorAll(
      ".tag-filter",
    ) as NodeListOf<HTMLButtonElement>;
    const noResults = document.querySelector(".no-results") as HTMLDivElement;
    const postList = document.querySelector(".post-list") as HTMLUListElement;
    const postListAll = document.querySelector(
      ".post-list-all",
    ) as HTMLUListElement;
    const paginationContainer = document.getElementById(
      "pagination-container",
    ) as HTMLDivElement;
    const viewToggle = document.getElementById(
      "view-toggle",
    ) as HTMLButtonElement;
    const paginationIcon = document.getElementById(
      "pagination-icon",
    ) as HTMLElement;
    const allIcon = document.getElementById("all-icon") as HTMLElement;
    const viewLabel = document.getElementById("view-label") as HTMLElement;

    if (
      !searchInput ||
      !searchForm ||
      !clearButton ||
      !resetButton ||
      !noResults ||
      !postList ||
      !postListAll ||
      !paginationContainer ||
      !viewToggle ||
      !paginationIcon ||
      !allIcon ||
      !viewLabel
    ) {
      return;
    }

    // Get saved state
    const { searchTerm, activeTag, viewAll } = PostSearchState.getSearchState();
    let isViewingAll = viewAll || false;
    let currentActiveTag = activeTag || "";

    // Initialize search field from saved state
    if (searchTerm) {
      searchInput.value = searchTerm;
      clearButton.style.display = "";
    }

    // Initialize tag selection from saved state
    if (currentActiveTag) {
      tagButtons.forEach((btn) => {
        if (btn.getAttribute("data-tag") === currentActiveTag) {
          btn.classList.add("active");
        } else {
          btn.classList.remove("active");
        }
      });
    } else {
      // If no active tag, make "All" active
      const allTagButton = Array.from(tagButtons).find(
        (btn) => btn.getAttribute("data-tag") === "",
      );
      if (allTagButton) {
        allTagButton.classList.add("active");
      }
    }

    // Filter posts based on current search and tag
    function filterPosts(): void {
      const searchTerm = searchInput.value.toLowerCase();
      let visibleCount = 0;

      // Save search state
      PostSearchState.setSearchState(
        searchTerm,
        currentActiveTag,
        isViewingAll,
      );

      // Determine which list to display
      const usingSearchResults = searchTerm !== "";
      const displayingPaginated = !isViewingAll && !usingSearchResults;
      const displayingAll = isViewingAll || usingSearchResults;

      // Show/hide appropriate lists
      postList.style.display = displayingPaginated ? "" : "none";
      postListAll.style.display = displayingAll ? "" : "none";
      paginationContainer.style.display = displayingPaginated ? "" : "none";

      // Filter posts in the visible list
      const itemsToFilter = displayingAll
        ? postListAll.querySelectorAll<HTMLLIElement>(".post-dropdown-item")
        : postList.querySelectorAll<HTMLLIElement>(".post-dropdown-item");

      itemsToFilter.forEach((post) => {
        const titleElement = post.querySelector(".post-title");
        const descriptionElement = post.querySelector(".post-description");
        if (!titleElement) return;

        const title = titleElement.textContent?.toLowerCase() || "";
        const description =
          descriptionElement?.textContent?.toLowerCase() || "";
        const keywordsText = post.getAttribute("data-keywords") || "";
        const keywords = keywordsText
          ? keywordsText.toLowerCase().split(",")
          : [];

        const matchesSearch =
          !searchTerm ||
          title.includes(searchTerm) ||
          description.includes(searchTerm);
        const matchesTag =
          !currentActiveTag ||
          keywords.includes(currentActiveTag.toLowerCase());

        post.style.display = matchesSearch && matchesTag ? "" : "none";
        if (matchesSearch && matchesTag) visibleCount++;
      });

      // Show/hide no results message
      if (visibleCount === 0) {
        if (displayingPaginated) postList.style.display = "none";
        if (displayingAll) postListAll.style.display = "none";
        noResults.style.display = "block";
      } else {
        noResults.style.display = "none";
      }

      clearButton.style.display = searchInput.value ? "" : "none";
      document.documentElement.classList.remove("filtering-active");
    }

    // Toggle between paginated view and view all
    function updateViewMode(viewAll: boolean): void {
      isViewingAll = viewAll;

      if (viewAll) {
        postList.style.display = "none";
        postListAll.style.display = "";
        paginationContainer.style.display = "none";
        paginationIcon.style.display = "none";
        allIcon.style.display = "";
        viewLabel.textContent = "Paginate";
      } else {
        postList.style.display = "";
        postListAll.style.display = "none";
        paginationContainer.style.display = "";
        paginationIcon.style.display = "";
        allIcon.style.display = "none";
        viewLabel.textContent = "View All";
      }

      filterPosts();
    }

    // Set up event listeners
    searchForm.addEventListener("submit", (e) => {
      e.preventDefault();
      filterPosts();
    });

    searchInput.addEventListener("input", () => {
      clearButton.style.display = searchInput.value ? "" : "none";
    });

    clearButton.addEventListener("click", () => {
      searchInput.value = "";
      filterPosts();
    });

    tagButtons.forEach((btn) => {
      btn.addEventListener("click", () => {
        const tagValue = btn.getAttribute("data-tag") || "";

        tagButtons.forEach((b) => b.classList.remove("active"));
        btn.classList.add("active");
        currentActiveTag = tagValue;

        // If a tag is selected (not "All"), automatically switch to view all posts
        if (tagValue !== "" && !isViewingAll) {
          isViewingAll = true;
          updateViewMode(true);
        } else {
          filterPosts();
        }
      });
    });

    viewToggle.addEventListener("click", () => {
      updateViewMode(!isViewingAll);
      PostSearchState.setSearchState(
        searchInput.value,
        currentActiveTag,
        isViewingAll,
      );
    });

    resetButton.addEventListener("click", () => {
      searchInput.value = "";
      currentActiveTag = "";
      tagButtons.forEach((btn) => {
        btn.classList.remove("active");
        if (btn.getAttribute("data-tag") === "") {
          btn.classList.add("active");
        }
      });
      PostSearchState.clearSearchState();
      filterPosts();
    });

    // Save state when navigating with pagination
    document
      .querySelectorAll<HTMLAnchorElement>(".pagination-link")
      .forEach((link) => {
        link.addEventListener("click", () => {
          PostSearchState.setSearchState(
            searchInput.value,
            currentActiveTag,
            isViewingAll,
          );
          if (searchInput.value || currentActiveTag) {
            document.documentElement.classList.add("filtering-active");
          }
        });
      });

    // Apply initial filter with saved state
    updateViewMode(isViewingAll);
  });
</script>

<style lang="scss">
  @use "../../styles/global" as *;

  .posts-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
  }

  .page-title {
    margin-bottom: 0;
  }

  .header-actions {
    display: flex;
    gap: 0.75rem;
    align-items: center;
  }

  .archive-link,
  .view-toggle {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.9rem;
    color: darken($secondary, 20%);
    text-decoration: none;
    padding: 0.4rem 0.8rem;
    border-radius: 4px;
    transition: all 0.2s ease;
    background-color: transparent;
    border: none;
    cursor: pointer;
    font-family: inherit;

    &:hover {
      background-color: rgba(255, 255, 255, 0.05);
      color: $secondary;
    }

    :global(svg) {
      width: 0.9rem;
      height: 0.9rem;
    }
  }

  .filters-container {
    margin-bottom: 1.5rem;
  }

  .search-container {
    margin-bottom: 1rem;

    form {
      position: relative;
      display: flex;
    }

    #search-input {
      flex: 1;
      padding: 0.6rem 0.8rem;
      padding-right: 2.5rem;
      border-radius: 4px;
      background-color: rgba(255, 255, 255, 0.05);
      border: 1px solid rgba(255, 255, 255, 0.1);
      color: $secondary;
      font-size: 0.95rem;
      transition: all 0.2s ease;
      width: 100%;

      &:focus {
        outline: none;
        background-color: rgba(255, 255, 255, 0.08);
        border-color: rgba(255, 255, 255, 0.2);
      }

      &::placeholder {
        color: rgba(255, 255, 255, 0.5);
      }
    }

    .search-button {
      position: absolute;
      right: 0;
      top: 0;
      height: 100%;
      padding: 0 0.8rem;
      background: none;
      border: none;
      color: rgba(255, 255, 255, 0.7);
      cursor: pointer;

      &:hover {
        color: $secondary;
      }

      :global(svg) {
        width: 0.9rem;
        height: 0.9rem;
      }
    }

    .clear-search {
      position: absolute;
      right: 2.5rem;
      top: 0;
      height: 100%;
      display: flex;
      align-items: center;
      padding: 0 0.5rem;
      background: none;
      border: none;
      color: rgba(255, 255, 255, 0.7);
      cursor: pointer;
      text-decoration: none;

      &:hover {
        color: $secondary;
      }

      :global(svg) {
        width: 0.9rem;
        height: 0.9rem;
      }
    }
  }

  .tags-container {
    margin-bottom: 1rem;
  }

  .tags-wrap {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    padding-bottom: 0.5rem;
  }

  .tag-filter {
    display: inline-block;
    padding: 0.3rem 0.8rem;
    border-radius: 4px;
    background-color: rgba(255, 255, 255, 0.05);
    color: rgba(255, 255, 255, 0.7);
    font-size: 0.85rem;
    text-decoration: none;
    transition: all 0.2s ease;
    margin-bottom: 0.5rem;
    border: none;
    cursor: pointer;
    font-family: inherit;

    &:hover {
      background-color: rgba(255, 255, 255, 0.1);
      color: $secondary;
    }

    &.active {
      background-color: rgba(255, 255, 255, 0.15);
      color: $secondary;
      font-weight: 500;
    }
  }

  .post-list,
  .post-list-all {
    padding: 0;
    margin: 0;
    width: 100%;
    list-style: none;
  }

  .post-dropdown-item {
    background-color: lighten($primary, 6%);
    list-style: none;
    padding: 12px 16px;
    border: 1px solid darken($primary, 1%);
    border-radius: 6px;
    margin: 12px 0;
    width: 100%;
    height: 140px;
    display: flex;
    overflow: hidden;
    transition:
      background-color 0.15s ease-out,
      transform 0.1s ease-out;

    &:hover {
      cursor: pointer;
      color: darken($secondary, 4%);
      background-color: lighten($primary, 9%);
      transform: translateY(-1px);
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
  }

  .dropdown-link {
    display: block;
    text-decoration: none;
    width: 100%;
    color: $secondary;

    &:visited {
      color: $secondary;
    }
  }

  .post-content {
    display: flex;
    flex-direction: column;
    width: 100%;
    height: 100%;
  }

  .post-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 4px;
    width: 100%;
  }

  .post-title {
    font-size: 1.2em;
    font-weight: bold;
    margin: 0;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    flex: 1;
  }

  .post-date {
    font-size: 0.75em;
    color: darken($secondary, 20%);
    margin: 0 0 8px 0;
    display: block;
  }

  .post-description {
    font-size: 0.85em;
    color: darken($secondary, 10%);
    margin: 0;
    line-height: 1.4;
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
    flex: 1;
  }

  .post-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 6px;
    margin-left: 12px;
  }

  .post-tag {
    font-size: 0.7rem;
    background: rgba(255, 255, 255, 0.1);
    padding: 2px 8px;
    border-radius: 3px;
  }

  .no-results {
    text-align: center;
    padding: 3rem 2rem;
    background-color: rgba(255, 255, 255, 0.03);
    border-radius: 6px;

    :global(.search-icon) {
      font-size: 2rem;
      opacity: 0.5;
      margin-bottom: 1rem;
      display: block;
      width: 2rem !important;
      height: 2rem !important;
      margin: 0 auto 1rem;
    }

    p {
      font-size: 1.1rem;
      margin-bottom: 1.5rem;
    }

    .reset-filters {
      display: inline-block;
      padding: 0.5rem 1rem;
      background-color: rgba(255, 255, 255, 0.1);
      color: $secondary;
      text-decoration: none;
      border-radius: 4px;
      transition: all 0.2s ease;
      border: none;
      cursor: pointer;
      font-family: inherit;
      font-size: 1rem;

      &:hover {
        background-color: rgba(255, 255, 255, 0.15);
        transform: translateY(-1px);
      }
    }
  }

  @media (max-width: 768px) {
    .header-actions {
      flex-direction: column;
      align-items: flex-end;
      gap: 0.5rem;
    }

    .archive-link,
    .view-toggle {
      font-size: 0.8rem;
      padding: 0.3rem 0.6rem;
    }
  }
</style>

---
import Navigation from "../components/Navigation.astro";
import Footer from "../components/Footer.astro";
import "../styles/global.scss";

export interface Props {
  title: string;
  description?: string;
  keywords?: string[];
  date?: string;
  showBackgroundGrid?: boolean;
}

const {
  title,
  description,
  keywords = [],
  date,
  showBackgroundGrid = true,
} = Astro.props;
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1, user-scalable=yes"
    />
    <title>{title}</title>
    <meta name="description" content={description} />
    {
      keywords.length > 0 && (
        <meta name="keywords" content={keywords.join(", ")} />
      )
    }
    {date && <meta property="article:published_time" content={date} />}
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="stylesheet" href="https://cdn.lineicons.com/5.0/lineicons.css" />
  </head>
  <body>
    {showBackgroundGrid && <div class="background-pattern" />}

    <div class="page-container">
      <Navigation />

      <main class="content-wrapper">
        <slot />
      </main>

      <Footer />
    </div>

    <script>
      document.addEventListener("DOMContentLoaded", () => {
        const fadeElements = document.querySelectorAll(".fade-in");

        const observer = new IntersectionObserver(
          (entries) => {
            entries.forEach((entry) => {
              if (entry.isIntersecting) {
                entry.target.classList.add("visible");
                observer.unobserve(entry.target);
              }
            });
          },
          { threshold: 0.1 },
        );

        fadeElements.forEach((el) => observer.observe(el));
      });
    </script>
    <script
      defer
      data-domain="notashelf.dev"
      src="https://pl.notashelf.dev/js/script.file-downloads.hash.outbound-links.pageview-props.tagged-events.js"
    ></script>
    <script>
      window.plausible =
        window.plausible ||
        function () {
          (window.plausible.q = window.plausible.q || []).push(arguments);
        };
    </script>
  </body>
</html>

<style>
  html {
    box-sizing: border-box;
  }

  *,
  *:before,
  *:after {
    box-sizing: inherit;
  }

  body {
    margin: 0;
    padding: 0;
  }

  .page-container {
    width: 80ch;
    max-width: 100%;
    margin: 0 auto;
    padding: 0 1rem;
    box-sizing: border-box;
  }

  .content-wrapper {
    width: 80ch;
    max-width: 100%;
    margin: 0 auto;
    padding: 0;
    box-sizing: border-box;
  }

  :global(.content-wrapper > *) {
    width: 100%;
    padding: 0;
    margin: 0;
  }

  .background-pattern {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-image:
      linear-gradient(to right, rgba(255, 255, 255, 0.02) 1px, transparent 1px),
      linear-gradient(to bottom, rgba(255, 255, 255, 0.02) 1px, transparent 1px);
    background-size: 20px 20px;
    z-index: -1;
    pointer-events: none;
  }

  :global(.fade-in) {
    opacity: 0;
    transform: translateY(10px);
    transition:
      opacity 0.6s ease-out,
      transform 0.6s ease-out;
    transition-delay: var(--delay, 0s);
  }

  :global(.fade-in.visible) {
    opacity: 1;
    transform: translateY(0);
  }
</style>

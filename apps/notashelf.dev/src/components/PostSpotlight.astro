---
export interface PostWithReadingTime {
  id: string;
  data: {
    title: string;
    date: Date;
    description?: string;
    draft?: boolean;
  };
  readingTime: number;
}

interface Props {
  spotlightPost: PostWithReadingTime | null;
  sidePosts: PostWithReadingTime[];
}

const { spotlightPost, sidePosts } = Astro.props;

const formatDate = (date: Date) => {
  return date.toLocaleDateString("en-US", {
    year: "numeric",
    month: "short",
    day: "numeric",
  });
};
---

<div class="featured-content">
  {
    spotlightPost && (
      <a href={`/posts/${spotlightPost.id}`} class="spotlight-post">
        <div class="spotlight-content">
          <div class="content-header">
            <h3>{spotlightPost.data.title}</h3>
            <div class="post-meta">
              <time datetime={spotlightPost.data.date.toISOString()}>
                {formatDate(spotlightPost.data.date)}
              </time>
              <span class="reading-time">
                {spotlightPost.readingTime} min read
              </span>
            </div>
          </div>

          <div class="content-body">
            {spotlightPost.data.description ? (
              <p>{spotlightPost.data.description}</p>
            ) : (
              <div class="spacer" />
            )}
          </div>
        </div>
      </a>
    )
  }

  <div class="posts-side">
    {
      sidePosts.map((post, index) => (
        <a
          href={`/posts/${post.id}`}
          class={`side-post ${index === 0 ? "first" : "second"}`}
        >
          <h3>{post.data.title}</h3>
          <div class="post-meta">
            <time datetime={post.data.date.toISOString()}>
              {formatDate(post.data.date)}
            </time>
            <span class="reading-time">{post.readingTime} min read</span>
          </div>
        </a>
      ))
    }
  </div>
</div>

<style lang="scss">
  @use "sass:color";
  @use "../styles/global" as *;

  .featured-content {
    display: grid;
    grid-template-columns: 1.5fr 1fr;
    gap: 1.25rem;
    margin-top: 1.5rem;
    width: 100%;
    box-sizing: border-box;
  }

  .spotlight-post {
    background: linear-gradient(
      135deg,
      color.scale($primary, $lightness: 6%),
      color.scale($primary, $lightness: 8%)
    );
    border-radius: 8px;
    padding: 1.25rem;
    text-decoration: none;
    color: $secondary;
    transition: all 0.3s ease;
    display: flex;
    flex-direction: column;
    height: 100%;
    position: relative;
    overflow: hidden;
    box-sizing: border-box;

    &::before {
      content: "";
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 5px;
      background: linear-gradient(
        to right,
        $border-light,
        $text-subtle,
        $border-light
      );
      transform: translateY(-100%);
      transition: transform 0.3s ease;
    }

    &:hover {
      transform: translateY(-3px);
      box-shadow: 0 8px 16px rgba(0, 0, 0, 0.15);

      &::before {
        transform: translateY(0);
      }
    }

    .spotlight-content {
      display: flex;
      flex-direction: column;
      height: 100%;
    }

    h3 {
      font-size: 1.3rem;
      margin: 0 0 0.8rem;
      line-height: 1.3;
    }

    .post-meta {
      display: flex;
      align-items: center;
      margin-bottom: 0.8rem;
      font-size: 0.8rem;

      time {
        color: color.scale($secondary, $lightness: -20%);
      }

      .reading-time {
        margin-left: 1rem;
        padding-left: 1rem;
        border-left: 1px solid $border-light;
        color: color.scale($secondary, $lightness: -20%);
      }
    }

    .content-body {
      flex: 1;
      display: flex;
      flex-direction: column;
      min-height: 3rem;
    }

    .spacer {
      flex: 1;
    }

    p {
      font-size: 0.9rem;
      line-height: 1.5;
      margin: 0;
      color: color.scale($secondary, $lightness: -10%);
    }
  }

  .posts-side {
    display: flex;
    flex-direction: column;
    gap: 0.8rem;
    height: 100%;
    width: 100%;
    box-sizing: border-box;
  }

  .side-post {
    background-color: color.scale($primary, $lightness: 6%);
    border-radius: 8px;
    padding: 1rem;
    text-decoration: none;
    color: $secondary;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
    flex: 1;
    display: grid;
    grid-template-rows: auto auto;
    box-sizing: border-box;

    &::after {
      content: "";
      position: absolute;
      bottom: 0;
      right: 0;
      width: 20px;
      height: 20px;
      background: $button-bg;
      border-radius: 50%;
      transform: translate(50%, 50%) scale(0);
      transition: transform 0.5s cubic-bezier(0.19, 1, 0.22, 1);
    }

    &:hover {
      transform: translateY(-2px) translateX(2px);
      background-color: color.scale($primary, $lightness: 8%);

      &::after {
        transform: translate(50%, 50%) scale(15);
      }
    }

    &.first {
      border-left: 3px solid $border-light;
    }

    &.second {
      border-left: 3px solid $button-bg;
    }

    h3 {
      font-size: 1rem;
      margin: 0 0 0.5rem;
      line-height: 1.3;
      min-height: 2.6rem;
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }

    .post-meta {
      display: flex;
      align-items: center;
      font-size: 0.75rem;

      time {
        color: color.scale($secondary, $lightness: -20%);
      }

      .reading-time {
        margin-left: 0.8rem;
        padding-left: 0.8rem;
        border-left: 1px solid $border-light;
        color: color.scale($secondary, $lightness: -20%);
      }
    }
  }

  @media (max-width: 768px) {
    .featured-content {
      grid-template-columns: 1fr;
      gap: 1rem;
    }

    .side-post h3 {
      font-size: 0.95rem;
      min-height: 2.45rem;
    }
  }
</style>

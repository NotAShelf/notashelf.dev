---
import {
  faChevronDown,
  faChevronUp,
  faCircleCheck,
  faExclamationTriangle,
  faInfoCircle,
  faXmark,
} from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";

interface Props {
  type?: "info" | "warning" | "success";
  title?: string;
  collapsible?: boolean;
  closable?: boolean;
  expanded?: boolean;
  id?: string;
  showIcon?: boolean;
}

const {
  type = "info",
  title,
  collapsible = false,
  closable = true,
  expanded = true,
  id = `banner-${Math.random().toString(36).substring(2, 11)}`,
  showIcon = true,
} = Astro.props;

// Determine which icon to show based on type
const getTypeIcon = () => {
  switch (type) {
    case "warning":
      return faExclamationTriangle;
    case "success":
      return faCircleCheck;
    default:
      return faInfoCircle;
  }
};
---

<div class={`banner ${type}`} id={id} data-expanded={expanded}>
  <div class="banner-header">
    <div class="banner-title">
      {
        showIcon && (
          <FontAwesomeIcon icon={getTypeIcon()} className="banner-icon" />
        )
      }
      {title && <h3>{title}</h3>}
    </div>
    <div class="banner-actions">
      {
        collapsible && (
          <button
            class="banner-toggle"
            aria-label={expanded ? "Collapse banner" : "Expand banner"}
            title={expanded ? "Collapse" : "Expand"}
          >
            <FontAwesomeIcon
              icon={expanded ? faChevronUp : faChevronDown}
              className="toggle-icon"
            />
          </button>
        )
      }
      {
        closable && (
          <button class="banner-close" aria-label="Close banner" title="Close">
            <FontAwesomeIcon icon={faXmark} className="close-icon" />
          </button>
        )
      }
    </div>
  </div>
  <div class="banner-content">
    <slot />
  </div>
</div>

<script is:inline define:vars={{ id, collapsible }}>
  document.addEventListener("DOMContentLoaded", () => {
    const banner = document.getElementById(id);
    if (!banner) return;

    const toggleBtn = banner.querySelector(".banner-toggle");
    const closeBtn = banner.querySelector(".banner-close");
    const content = banner.querySelector(".banner-content");
    const toggleIcon = banner.querySelector(".toggle-icon");

    // Local storage key for this banner's state
    const storageKey = `banner-${id}-state`;

    // Initialize from local storage if available
    const savedState = localStorage.getItem(storageKey);
    if (savedState) {
      const { visible, expanded } = JSON.parse(savedState);

      if (!visible) {
        banner.style.display = "none";
        return;
      }

      if (collapsible) {
        banner.dataset.expanded = expanded;
        if (!expanded && content) {
          content.style.height = "0";
          content.style.opacity = "0";
          content.style.visibility = "hidden";
          toggleIcon.style.transform = "rotate(180deg)";
        }
      }
    }

    // Handle toggle click
    if (toggleBtn) {
      toggleBtn.addEventListener("click", () => {
        const isExpanded = banner.dataset.expanded === "true";
        banner.dataset.expanded = !isExpanded;

        if (content) {
          if (isExpanded) {
            content.style.height = "0";
            content.style.opacity = "0";
            content.style.visibility = "hidden";
            toggleIcon.style.transform = "rotate(180deg)";
          } else {
            content.style.height = "";
            content.style.opacity = "1";
            content.style.visibility = "visible";
            toggleIcon.style.transform = "rotate(0)";
          }
        }

        // Save state to localStorage
        localStorage.setItem(
          storageKey,
          JSON.stringify({
            visible: true,
            expanded: !isExpanded,
          }),
        );
      });
    }

    // Handle close click
    if (closeBtn) {
      closeBtn.addEventListener("click", () => {
        banner.style.display = "none";

        // Save state to localStorage
        localStorage.setItem(
          storageKey,
          JSON.stringify({
            visible: false,
            expanded: banner.dataset.expanded === "true",
          }),
        );
      });
    }
  });
</script>

<style lang="scss">
  @use "sass:color";
  @use "../styles/global" as *;

  .banner {
    width: 100%;
    border-radius: 6px;
    margin-bottom: 1.5rem;
    overflow: hidden;
    transition: all 0.3s ease;
    border: 1px solid rgba(255, 255, 255, 0.1);

    &.info {
      background-color: rgba(64, 156, 255, 0.1);
      border-left: 4px solid rgba(64, 156, 255, 0.6);

      :global(.banner-icon) {
        color: rgba(64, 156, 255, 0.9);
      }
    }

    &.warning {
      background-color: rgba(255, 170, 40, 0.1);
      border-left: 4px solid rgba(255, 170, 40, 0.6);

      :global(.banner-icon) {
        color: rgba(255, 170, 40, 0.9);
      }
    }

    &.success {
      background-color: rgba(50, 205, 100, 0.1);
      border-left: 4px solid rgba(50, 205, 100, 0.6);

      :global(.banner-icon) {
        color: rgba(50, 205, 100, 0.9);
      }
    }
  }

  .banner-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.8rem 1rem;
  }

  .banner-title {
    display: flex;
    align-items: center;
    gap: 0.5rem;

    h3 {
      margin: 0;
      font-size: 1.1rem;
      font-weight: 500;
      color: $secondary;
    }

    :global(.banner-icon) {
      width: 1.1rem !important;
      height: 1.1rem !important;
    }
  }

  .banner-actions {
    display: flex;
    gap: 0.5rem;
    align-items: center;
  }

  .banner-toggle,
  .banner-close {
    background: none;
    border: none;
    color: rgba(255, 255, 255, 0.7);
    cursor: pointer;
    padding: 0.3rem;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 4px;
    transition: all 0.2s ease;

    &:hover {
      background-color: rgba(255, 255, 255, 0.1);
      color: $secondary;
    }

    :global(svg) {
      width: 0.9rem !important;
      height: 0.9rem !important;
      transition: transform 0.3s ease;
    }
  }

  .banner-content {
    padding: 0 1rem;
    color: color.scale($secondary, $lightness: -10%);
    font-size: 0.95rem;
    line-height: 1.5;
    transition: all 0.3s ease;

    p:first-child {
      margin-top: 0;
    }

    p:last-child {
      margin-bottom: 0;
    }
  }

  [data-expanded="false"] .banner-content {
    height: 0;
    padding-top: 0;
    padding-bottom: 0;
    opacity: 0;
    visibility: hidden;
  }

  @media (max-width: 768px) {
    .banner-header {
      padding: 0.6rem 0.8rem;
    }

    .banner-title h3 {
      font-size: 1rem;
    }

    .banner-content {
      padding: 0 0.8rem 0.8rem 0.8rem;
      font-size: 0.9rem;
    }
  }
</style>

---
import { faArrowLeft, faCode } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import BaseLayout from "@layouts/BaseLayout.astro";

export interface Props {
  frontmatter: {
    title: string;
    description?: string;
    date?: string;
    keywords?: string[];
  };
}

const { frontmatter } = Astro.props;
const { title, description, date, keywords = [] } = frontmatter;

// Format date if it exists
const formattedDate = date
  ? new Date(date).toLocaleDateString("en-US", {
      year: "numeric",
      month: "long",
      day: "numeric",
    })
  : null;

// Calculate reading time based on content
const content = await Astro.slots.render("default");
const wordCount = content.split(/\s+/g).length;
const readingTime = Math.max(1, Math.ceil(wordCount / 200)); // 200 words per minute

// Simple regex to extract headings with their IDs
const headingRegex = /<h([2-3])[^>]*id="([^"]*)"[^>]*>(.*?)<\/h\1>/g;
const headings = Array.from(content.matchAll(headingRegex), (match) => ({
  level: parseInt(match[1]),
  id: match[2],
  text: match[3].replace(/<[^>]*>/g, ""),
}));

// Show TOC only if there are enough headings
const showToc = headings.length >= 2;

// Get current URL to determine slug
const currentPath = Astro.url.pathname;
const slug = currentPath.split("/").filter(Boolean).pop();

// Get git revision from environment variable or default to main
const gitRevision = import.meta.env.GIT_REV || "main";

// Get post sources from environment variable or default to the site source
const postSrc =
  import.meta.env.SITE_SRC || "https://github.com/notashelf/notashelf.dev";
---

<BaseLayout
  title={`${title} | Blog`}
  description={description}
  keywords={keywords}
  date={date}
  showBackgroundGrid={false}
>
  <article class="post">
    <h1 class="post-title">{title}</h1>

    <div class="post-meta">
      <div class="meta-left">
        {formattedDate && <time datetime={date || ""}>{formattedDate}</time>}
        <span class="reading-time">{readingTime} min read</span>
        <a
          href={`${postSrc}/blob/${gitRevision}/apps/notashelf.dev/posts/${slug}.md`}
          class="source-link"
          target="_blank"
          rel="noopener noreferrer"
          title="View Markdown Source"
        >
          <FontAwesomeIcon icon={faCode} /> Source
        </a>
      </div>

      {
        keywords.length > 0 && (
          <div class="post-tags">
            {keywords.map((tag) => (
              <span class="tag">{tag}</span>
            ))}
          </div>
        )
      }
    </div>

    {
      showToc && (
        <div class="toc-container">
          <details class="toc" open>
            <summary>Table of Contents</summary>
            <nav class="toc-list">
              {headings.map((heading) => (
                <a
                  href={`#${heading.id}`}
                  class={`toc-item level-${heading.level}`}
                >
                  {heading.text}
                </a>
              ))}
            </nav>
          </details>
        </div>
      )
    }

    <div class="post-content">
      <slot />
    </div>

    <div class="post-footer">
      <a href="/posts" class="back-to-posts">
        <FontAwesomeIcon icon={faArrowLeft} /> Back to all posts
      </a>
    </div>
  </article>
</BaseLayout>

<script>
  import "../scripts/post-toc.ts";
</script>

<style lang="scss">
  @use "../styles/global" as *;

  .post {
    max-width: $content-width;
    margin: 0 auto;

    a {
      word-break: break-word;
      overflow-wrap: break-word;
    }
  }

  .post-title {
    font-size: 2.5rem;
    margin-bottom: 1rem;
    line-height: 1.2;
  }

  .post-meta {
    display: flex;
    margin-bottom: 2rem;
    padding-bottom: 1rem;
    border-bottom: 1px solid $border-light;
    justify-content: space-between;
    align-items: center;

    .meta-left {
      display: flex;
      align-items: center;
      gap: 1rem;
    }
  }

  .post-meta time {
    color: $text-subtle;
    font-size: 0.9rem;
  }

  .reading-time {
    color: $text-subtle;
    font-size: 0.9rem;
    padding-left: 1rem;
    border-left: 1px solid $border-light;
  }

  .source-link {
    display: flex;
    align-items: center;
    gap: 0.4rem;
    padding-left: 1rem;
    border-left: 1px solid $border-light;
    color: $text-subtle;
    font-size: 0.9rem;
    text-decoration: none;
    transition: color 0.2s ease;

    &:hover {
      color: $secondary;
    }

    :global(svg) {
      width: 0.9rem !important;
      height: 0.9rem !important;
    }
  }

  .post-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .tag {
    @include rounded-border;
    @include smooth-transition(background-color);
    display: inline-block;
    background-color: $button-bg;
    color: $secondary;
    padding: 0.25rem 0.75rem;
    font-size: 0.8rem;

    &:hover {
      background-color: $button-bg-hover;
    }
  }

  .post-content {
    line-height: 1.8;
    font-size: 1.05rem;

    :global(h2) {
      margin-top: 2.5rem;
      margin-bottom: 1rem;
      font-size: 1.7rem;
      position: relative;

      &::before {
        content: "";
        position: absolute;
        bottom: -5px;
        left: 0;
        width: 2rem;
        height: 2px;
        background-color: $border-medium;
      }
    }

    :global(h3) {
      margin-top: 2rem;
      margin-bottom: 0.8rem;
      font-size: 1.4rem;
    }

    :global(p) {
      margin-bottom: 1.5rem;
      margin-top: 0;
    }

    :global(blockquote p) {
      margin-bottom: 0;
    }

    :global(blockquote p + p) {
      margin-top: 0.5rem;
    }

    :global(ul),
    :global(ol) {
      margin-bottom: 1.5rem;
      padding-left: 1.5rem;

      li {
        margin-bottom: 0.5rem;
      }
    }

    :global(img) {
      max-width: 100%;
      border-radius: 6px;
      margin: 1.5rem 0;
    }
  }

  .post-footer {
    margin-top: 3rem;
    padding-top: 1.5rem;
    border-top: 1px solid $border-light;
  }

  .back-to-posts {
    @include rounded-border;
    @include smooth-transition;
    display: inline-flex;
    align-items: center;
    color: $text-muted;
    text-decoration: none;
    font-size: 0.9rem;
    padding: 0.5rem 1rem;
    background-color: $button-bg;
    gap: 0.5rem;

    @include icon-size(0.9rem);

    :global(svg) {
      @include smooth-transition(transform);
    }

    &:hover {
      background-color: $button-bg-hover;

      :global(svg) {
        transform: translateX(-3px);
      }
    }
  }

  @media (max-width: 768px) {
    .post-meta {
      flex-direction: column;
      align-items: flex-start;
      gap: 1rem;
    }

    .source-link,
    .reading-time {
      border-left: none;
      padding-left: 0;
    }
  }
</style>

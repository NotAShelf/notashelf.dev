---
import Pagination from "@components/Pagination.svelte";
import PostList from "@components/PostList.astro";
import TidbitList from "@components/TidbitList.astro";
import {
  faArchive,
  faLayerGroup,
  faList,
  faMagnifyingGlass,
  faToggleOff,
  faXmark,
} from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import BaseLayout from "@layouts/BaseLayout.astro";
import type { PostEntry, TidbitEntry } from "@lib/types";

import { getCollection } from "astro:content";

// Get all blog posts
const allPosts = await getCollection("posts");

// Get all tidbits
const allTidbits = (await getCollection("tidbits")) as TidbitEntry[];

// Extract all unique tags from posts
const allPostTags = [
  ...new Set(
    allPosts
      .filter((post: PostEntry) => !post.data.draft && !post.data.archived)
      .flatMap((post: PostEntry) => post.data.keywords || []),
  ),
].sort();

// Extract all unique tags from tidbits
const allTidbitTags = [
  ...new Set(
    allTidbits
      .filter((tidbit: TidbitEntry) => !tidbit.data.draft)
      .flatMap((tidbit: TidbitEntry) => tidbit.data.keywords || []),
  ),
].sort();

// Filter out draft and archived posts
const filteredPosts = allPosts
  .filter((post: PostEntry) => !post.data.draft && !post.data.archived)
  .sort(
    (a: PostEntry, b: PostEntry) =>
      new Date(b.data.date).getTime() - new Date(a.data.date).getTime(),
  );

// Filter out draft tidbits
const filteredTidbits = allTidbits
  .filter((tidbit: TidbitEntry) => !tidbit.data.draft)
  .sort(
    (a: TidbitEntry, b: TidbitEntry) =>
      new Date(b.data.date).getTime() - new Date(a.data.date).getTime(),
  );

// Calculate pagination for posts
const postsPerPage = 5;
const totalPosts = filteredPosts.length;
const totalPostPages = Math.ceil(totalPosts / postsPerPage);
const currentPage = 1;
const posts = filteredPosts.slice(0, postsPerPage);

// Calculate pagination for tidbits
const tidbitsPerPage = 8;
const totalTidbits = filteredTidbits.length;
const totalTidbitPages = Math.ceil(totalTidbits / tidbitsPerPage);
const tidbits = filteredTidbits.slice(0, tidbitsPerPage);
---

<BaseLayout
  title="Posts & Tidbits"
  description="Collection of blog posts and tidbits"
>
  <div class="posts-header">
    <h1 class="page-title">
      <span class="title-word" id="posts-word">Posts</span>
      <span class="title-separator">&</span>
      <span class="title-word" id="tidbits-word">Tidbits</span>
    </h1>
    <div class="header-actions">
      <button
        id="view-toggle"
        class="view-toggle"
        title="Toggle view mode"
        aria-label="Toggle between paginated and all posts view"
      >
        <FontAwesomeIcon icon={faLayerGroup} id="pagination-icon" />
        <FontAwesomeIcon
          icon={faList}
          id="all-icon"
          style={{ display: "none" }}
        />
        <span id="view-label">View All</span>
      </button>
      <button
        id="content-toggle"
        class="content-toggle"
        title="Toggle between posts and tidbits"
        aria-label="Toggle between posts and tidbits view"
      >
        <FontAwesomeIcon icon={faToggleOff} id="toggle-icon" />
        <span id="content-label">Show Tidbits</span>
      </button>
      <a href="/archive" class="archive-link">
        <FontAwesomeIcon icon={faArchive} /> View Archive
      </a>
    </div>
  </div>

  <div class="filters-container">
    <div class="search-container">
      <form id="search-form">
        <input
          type="text"
          name="q"
          id="search-input"
          placeholder="Search posts..."
          aria-label="Search posts"
          autocomplete="off"
        />
        <button type="submit" class="search-button" id="search-button">
          <FontAwesomeIcon icon={faMagnifyingGlass} />
        </button>
        <button
          type="button"
          class="clear-search"
          id="clear-search"
          style="display: none;"
        >
          <FontAwesomeIcon icon={faXmark} />
        </button>
      </form>
    </div>

    <div class="tags-container">
      <div class="tags-wrap post-tags-wrap">
        <button type="button" class="tag-filter active" data-tag="">
          All
        </button>

        {
          allPostTags.map((tag) => (
            <button type="button" class="tag-filter" data-tag={tag}>
              {tag}
            </button>
          ))
        }
      </div>
      <div class="tags-wrap tidbit-tags-wrap">
        <button type="button" class="tag-filter active" data-tag="">
          All
        </button>

        {
          allTidbitTags.map((tag) => (
            <button type="button" class="tag-filter" data-tag={tag}>
              {tag}
            </button>
          ))
        }
      </div>
    </div>
  </div>

  <div id="posts-container">
    <PostList posts={posts} className="post-list" />
    <PostList
      posts={filteredPosts}
      className="post-list-all"
      style="display: none;"
    />
  </div>

  <div id="tidbits-container" style="display: none;">
    <div class="tidbit-container">
      <TidbitList tidbits={tidbits} className="tidbit-list" />
      <TidbitList
        tidbits={filteredTidbits}
        className="tidbit-list-all"
        style="display: none;"
      />
    </div>
  </div>

  <div class="no-results no-results-posts" style="display: none;">
    <FontAwesomeIcon icon={faMagnifyingGlass} className="search-icon" />
    <p>No posts found matching your criteria</p>
    <button type="button" id="reset-filters-posts" class="reset-filters">
      Reset filters
    </button>
  </div>
  <div class="no-results no-results-tidbits" style="display: none;">
    <FontAwesomeIcon icon={faMagnifyingGlass} className="search-icon" />
    <p>No tidbits found matching your criteria</p>
    <button type="button" id="reset-filters-tidbits" class="reset-filters">
      Reset filters
    </button>
  </div>

  <div id="pagination-container">
    <Pagination
      currentPage={currentPage}
      totalPages={totalPostPages}
      baseUrl="/posts"
      client:load
    />
  </div>

  <div id="tidbit-pagination-container" style="display: none;">
    <Pagination
      currentPage={currentPage}
      totalPages={totalTidbitPages}
      baseUrl="/posts"
      client:load
    />
  </div>
</BaseLayout>

<script>
  import type { AllowedKeyword, PostEntry, TidbitEntry } from "@lib/types";
  import { allowedKeywords } from "@lib/types";
  import { WasmPostSearchUI } from "@scripts/wasm-post-search-ui";

  document.addEventListener("DOMContentLoaded", async () => {
    // View state from URL params
    function getQueryParam(name: string): string | null {
      const params = new URLSearchParams(window.location.search);
      return params.get(name);
    }
    function setQueryParam(name: string, value: string) {
      const params = new URLSearchParams(window.location.search);
      params.set(name, value);
      history.replaceState(
        null,
        "",
        `${window.location.pathname}?${params.toString()}`,
      );
    }

    let showingTidbits: boolean = false;
    let showingAll: boolean = false;

    // Read initial state from URL params
    const viewParam = getQueryParam("view");
    const typeParam = getQueryParam("type");
    const searchParam = getQueryParam("q");
    if (viewParam === "tidbits") {
      showingTidbits = true;
    } else {
      showingTidbits = false;
    }
    if (typeParam === "all") {
      showingAll = true;
    } else {
      showingAll = false;
    }

    // Initialize search input from URL param
    document.addEventListener("DOMContentLoaded", () => {
      const searchInputElem = document.getElementById(
        "search-input",
      ) as HTMLInputElement;
      if (searchInputElem && searchParam) {
        searchInputElem.value = searchParam;
        performContextualSearch();
      }
    });

    function switchTagContainers() {
      const postTagsWrap = document.querySelector(
        ".post-tags-wrap",
      ) as HTMLElement;
      const tidbitTagsWrap = document.querySelector(
        ".tidbit-tags-wrap",
      ) as HTMLElement;

      if (showingTidbits) {
        if (postTagsWrap) postTagsWrap.classList.remove("visible");
        if (tidbitTagsWrap) tidbitTagsWrap.classList.add("visible");
      } else {
        if (tidbitTagsWrap) tidbitTagsWrap.classList.remove("visible");
        if (postTagsWrap) postTagsWrap.classList.add("visible");
      }
    }

    function resetActiveTagFilters() {
      const currentContainer = showingTidbits
        ? ".tidbit-tags-wrap"
        : ".post-tags-wrap";
      document
        .querySelectorAll(`${currentContainer} .tag-filter`)
        .forEach((btn) => {
          btn.classList.remove("active");
        });
      const allButton = document.querySelector(
        `${currentContainer} .tag-filter[data-tag='']`,
      );
      if (allButton) {
        allButton.classList.add("active");
      }
    }

    function enforceContainerVisibility() {
      const postsContainer = document.getElementById(
        "posts-container",
      ) as HTMLElement | null;
      const tidbitsContainer = document.getElementById(
        "tidbits-container",
      ) as HTMLElement | null;
      const paginationContainer = document.getElementById(
        "pagination-container",
      ) as HTMLElement | null;
      const tidbitPaginationContainer = document.getElementById(
        "tidbit-pagination-container",
      ) as HTMLElement | null;
      const tidbitList = document.querySelector(
        ".tidbit-list",
      ) as HTMLElement | null;
      const tidbitListAll = document.querySelector(
        ".tidbit-list-all",
      ) as HTMLElement | null;
      const postList = document.querySelector(
        ".post-list",
      ) as HTMLElement | null;
      const postListAll = document.querySelector(
        ".post-list-all",
      ) as HTMLElement | null;

      if (showingTidbits) {
        if (postsContainer) postsContainer.style.display = "none";
        if (tidbitsContainer) tidbitsContainer.style.display = "block";
        if (paginationContainer) paginationContainer.style.display = "none";
        if (showingAll) {
          if (tidbitList) tidbitList.style.display = "none";
          if (tidbitListAll) tidbitListAll.style.display = "block";
          if (tidbitPaginationContainer)
            tidbitPaginationContainer.style.display = "none";
        } else {
          if (tidbitList) tidbitList.style.display = "block";
          if (tidbitListAll) tidbitListAll.style.display = "none";
          if (tidbitPaginationContainer)
            tidbitPaginationContainer.style.display = "block";
        }
      } else {
        if (postsContainer) postsContainer.style.display = "block";
        if (tidbitsContainer) tidbitsContainer.style.display = "none";
        if (tidbitPaginationContainer)
          tidbitPaginationContainer.style.display = "none";
        if (showingAll) {
          if (postList) postList.style.display = "none";
          if (postListAll) postListAll.style.display = "block";
          if (paginationContainer) paginationContainer.style.display = "none";
        } else {
          if (postList) postList.style.display = "block";
          if (postListAll) postListAll.style.display = "none";
          if (paginationContainer) paginationContainer.style.display = "block";
        }
      }
    }

    function performContextualSearch() {
      const searchInputElem = document.getElementById(
        "search-input",
      ) as HTMLInputElement;
      const searchValue = searchInputElem?.value.toLowerCase() || "";

      // Store search query in URL
      if (searchInputElem) {
        const params = new URLSearchParams(window.location.search);
        if (searchInputElem.value) {
          params.set("q", searchInputElem.value);
        } else {
          params.delete("q");
        }
        history.replaceState(
          null,
          "",
          `${window.location.pathname}?${params.toString()}`,
        );
      }
      const currentContainer = showingTidbits
        ? ".tidbit-tags-wrap"
        : ".post-tags-wrap";
      const activeTagButton = document.querySelector(
        `${currentContainer} .tag-filter.active`,
      ) as HTMLButtonElement;
      const activeTag = activeTagButton?.getAttribute("data-tag") || "";

      // Always hide both no-results elements before filtering
      const noResultsPosts = document.querySelector(
        ".no-results-posts",
      ) as HTMLElement;
      const noResultsTidbits = document.querySelector(
        ".no-results-tidbits",
      ) as HTMLElement;
      if (noResultsPosts) noResultsPosts.style.display = "none";
      if (noResultsTidbits) noResultsTidbits.style.display = "none";

      // Only search the currently visible list
      if (showingTidbits) {
        if (showingAll) {
          filterContent(
            ".tidbit-list-all .post-dropdown-item",
            searchValue,
            activeTag,
          );
        } else {
          filterContent(
            ".tidbit-list .post-dropdown-item",
            searchValue,
            activeTag,
          );
        }
      } else {
        if (showingAll) {
          filterContent(
            ".post-list-all .post-dropdown-item",
            searchValue,
            activeTag,
          );
        } else {
          filterContent(
            ".post-list .post-dropdown-item",
            searchValue,
            activeTag,
          );
        }
      }
      enforceContainerVisibility();
    }

    function filterContent(
      selector: string,
      searchValue: string,
      activeTag: string,
    ) {
      const items = document.querySelectorAll(selector);
      let visibleCount = 0;

      items.forEach((item) => {
        const element = item as HTMLElement;
        const title =
          element.querySelector(".post-title")?.textContent?.toLowerCase() ||
          "";
        const description =
          element
            .querySelector(".post-description")
            ?.textContent?.toLowerCase() || "";
        const keywords =
          element.getAttribute("data-keywords")?.split(",") || [];

        const matchesSearch =
          searchValue === "" ||
          title.includes(searchValue) ||
          description.includes(searchValue) ||
          keywords.some((k) => k.toLowerCase().includes(searchValue));

        const matchesTag = activeTag === "" || keywords.includes(activeTag);

        if (matchesSearch && matchesTag) {
          element.style.display = "";
          visibleCount++;
        } else {
          element.style.display = "none";
        }
      });

      // Show/hide no results message for posts or tidbits
      const noResultsPosts = document.querySelector(
        ".no-results-posts",
      ) as HTMLElement;
      const noResultsTidbits = document.querySelector(
        ".no-results-tidbits",
      ) as HTMLElement;
      if (selector.includes("tidbit-list")) {
        if (noResultsTidbits)
          noResultsTidbits.style.display =
            visibleCount === 0 ? "block" : "none";
        if (noResultsPosts) noResultsPosts.style.display = "none";
      } else {
        if (noResultsPosts)
          noResultsPosts.style.display = visibleCount === 0 ? "block" : "none";
        if (noResultsTidbits) noResultsTidbits.style.display = "none";
      }
    }

    function attachTagListeners() {
      document.querySelectorAll(".tag-filter").forEach((button) => {
        // Remove any existing listeners to prevent duplicates
        button.removeEventListener("click", handleTagClick);
        button.addEventListener("click", handleTagClick);
      });
    }

    function handleTagClick(e: Event) {
      const btn = e.target as HTMLButtonElement;

      // Get the current tag container (post or tidbit)
      const currentContainer = showingTidbits
        ? ".tidbit-tags-wrap"
        : ".post-tags-wrap";

      // Remove active class from all tags in current container
      document
        .querySelectorAll(`${currentContainer} .tag-filter`)
        .forEach((b) => {
          b.classList.remove("active");
        });

      // Add active class to clicked button
      btn.classList.add("active");

      performContextualSearch();
    }

    function ensureTagStyling() {
      document.querySelectorAll(".tags-wrap").forEach((container) => {
        const wrap = container as HTMLElement;
        if (wrap.style.display !== "none") {
          wrap.classList.add("tags-wrap");
          wrap.querySelectorAll(".tag-filter").forEach((button) => {
            (button as HTMLElement).classList.add("tag-filter");
          });
        }
      });
    }

    // Pass all posts and tidbits data to the WASM search UI
    const allPosts: PostEntry[] = [];
    const allTidbits: TidbitEntry[] = [];

    // Valid keywords from all posts and tidbits
    const validKeywords: AllowedKeyword[] = [
      ...new Set([
        ...allPosts.flatMap((p) => p.data.keywords || []),
        ...allTidbits.flatMap((t) => t.data.keywords || []),
      ]),
    ].filter((k): k is AllowedKeyword =>
      (allowedKeywords as readonly string[]).includes(k),
    );
    function filterToValidKeywords(arr: string[]): AllowedKeyword[] {
      // Only allow keywords that are present in the content collections
      return arr
        .map((k) => k.trim())
        .filter((k): k is AllowedKeyword =>
          validKeywords.includes(k as AllowedKeyword),
        );
    }

    // Extract post data from DOM elements for WASM
    document.querySelectorAll(".post-dropdown-item").forEach((el) => {
      const element = el as HTMLElement;
      const postId = element.getAttribute("data-post-id");
      const title = element.querySelector(".post-title")?.textContent;
      const description =
        element.querySelector(".post-description")?.textContent;
      const timeElement = element.querySelector(".post-date");
      const keywords = element.getAttribute("data-keywords")?.split(",") || [];

      // Extract actual date from the datetime attribute
      // or fallback gracefully
      let postDate = new Date();
      if (timeElement) {
        const datetimeAttr = timeElement.getAttribute("datetime");
        if (datetimeAttr) {
          const parsedDate = new Date(datetimeAttr);
          // Only use parsed date if it's valid
          if (!isNaN(parsedDate.getTime())) {
            postDate = parsedDate;
          }
        }
      }

      if (postId && title) {
        allPosts.push({
          id: postId,
          data: {
            title,
            description: description || "",
            keywords: filterToValidKeywords(
              keywords.filter((k) => k.trim() !== ""),
            ),
            date: postDate,
            draft: false,
            archived: false,
          },
          body: "",
          collection: "posts",
        });
      }
    });

    // Extract tidbit data from DOM elements for WASM
    document
      .querySelectorAll(".tidbit-container .post-dropdown-item")
      .forEach((el) => {
        const element = el as HTMLElement;
        const linkElement = element.querySelector(
          ".dropdown-link",
        ) as HTMLAnchorElement;
        const tidbitId = linkElement?.href.split("/").pop();
        const title = element.querySelector(".post-title")?.textContent;
        const description =
          element.querySelector(".post-description")?.textContent;
        const timeElement = element.querySelector(".post-date");
        const keywords =
          element.getAttribute("data-keywords")?.split(",") || [];

        // Extract actual date from the datetime attribute
        // or fallback gracefully
        let tidbitDate = new Date();
        if (timeElement) {
          const datetimeAttr = timeElement.getAttribute("datetime");
          if (datetimeAttr) {
            const parsedDate = new Date(datetimeAttr);
            // Only use parsed date if it's valid
            if (!isNaN(parsedDate.getTime())) {
              tidbitDate = parsedDate;
            }
          }
        }

        if (tidbitId && title) {
          allTidbits.push({
            id: tidbitId,
            data: {
              title,
              description: description || "",
              keywords: filterToValidKeywords(
                keywords.filter((k) => k.trim() !== ""),
              ),
              date: tidbitDate,
              draft: false,
            },
            body: "",
            collection: "tidbits",
          });
        }
      });

    // Initialize WASM search UI
    const searchUI = new WasmPostSearchUI(allPosts);
    await searchUI.init();

    // Initialize tag filters and title highlighting
    resetActiveTagFilters();

    // Set initial title highlighting and containers based on URL params
    const postsWord = document.getElementById("posts-word");
    const tidbitsWord = document.getElementById("tidbits-word");
    if (showingTidbits) {
      if (postsWord) postsWord.classList.remove("active");
      if (tidbitsWord) tidbitsWord.classList.add("active");
    } else {
      if (postsWord) postsWord.classList.add("active");
      if (tidbitsWord) tidbitsWord.classList.remove("active");
    }

    // Initialize tag containers
    switchTagContainers();

    // Content toggle
    const contentToggle = document.getElementById("content-toggle");
    const toggleIcon = document.getElementById("toggle-icon");
    const contentLabel = document.getElementById("content-label");
    const postContainer = document.querySelector(".post-list");
    const postContainerAll = document.querySelector(".post-list-all");
    const tidbitContainer = document.querySelector(".tidbit-container");
    const paginationContainer = document.getElementById("pagination-container");
    const tidbitPaginationContainer = document.getElementById(
      "tidbit-pagination-container",
    );

    // View toggle
    const viewToggle = document.getElementById("view-toggle");
    const paginationIcon = document.getElementById("pagination-icon");
    const allIcon = document.getElementById("all-icon");
    const viewLabel = document.getElementById("view-label");

    viewToggle?.addEventListener("click", () => {
      showingAll = !showingAll;
      setQueryParam("type", showingAll ? "all" : "paginated");

      // Update view toggle button
      if (showingAll) {
        (paginationIcon as HTMLElement | null)?.style.setProperty(
          "display",
          "none",
        );
        (allIcon as HTMLElement | null)?.style.setProperty("display", "inline");
        if (viewLabel) viewLabel.textContent = "Paginate";
      } else {
        (paginationIcon as HTMLElement | null)?.style.setProperty(
          "display",
          "inline",
        );
        (allIcon as HTMLElement | null)?.style.setProperty("display", "none");
        if (viewLabel) viewLabel.textContent = "View All";
      }
      performContextualSearch();
    });

    contentToggle?.addEventListener("click", () => {
      showingTidbits = !showingTidbits;
      setQueryParam("view", showingTidbits ? "tidbits" : "posts");

      // Update toggle button
      toggleIcon?.classList.toggle("fa-toggle-off", !showingTidbits);
      toggleIcon?.classList.toggle("fa-toggle-on", showingTidbits);
      if (contentLabel)
        contentLabel.textContent = showingTidbits
          ? "Show Posts"
          : "Show Tidbits";

      // Update title highlighting
      const postsWord = document.getElementById("posts-word");
      const tidbitsWord = document.getElementById("tidbits-word");
      if (postsWord) postsWord.classList.toggle("active", !showingTidbits);
      if (tidbitsWord) tidbitsWord.classList.toggle("active", showingTidbits);

      // Always update tag containers after toggling
      switchTagContainers();

      // Reset search and filters when switching
      const searchInput = document.getElementById(
        "search-input",
      ) as HTMLInputElement;
      if (searchInput) {
        searchInput.value = "";
        toggleClearButton(false);
      }
      resetActiveTagFilters();
      performContextualSearch();
    });

    // Add search input listener
    const searchInput = document.getElementById(
      "search-input",
    ) as HTMLInputElement;
    searchInput?.addEventListener("input", () => {
      performContextualSearch();
      toggleClearButton(!!searchInput.value);
    });

    // Initial tag listener setup
    attachTagListeners();
    ensureTagStyling();

    function toggleClearButton(enabled?: boolean) {
      const clearButton = document.getElementById(
        "clear-search",
      ) as HTMLElement | null;
      if (clearButton) {
        clearButton.style.display = enabled ? "block" : "none";
      }
    }

    // Reset filters button
    const resetButton = document.getElementById("reset-filters");
    resetButton?.addEventListener("click", () => {
      const searchInput = document.getElementById(
        "search-input",
      ) as HTMLInputElement;
      if (searchInput) {
        searchInput.value = "";
        toggleClearButton(false);
      }
      resetActiveTagFilters();
      performContextualSearch();
    });

    // Add clear search button functionality
    const clearButton = document.getElementById("clear-search");
    clearButton?.addEventListener("click", () => {
      const searchInput = document.getElementById(
        "search-input",
      ) as HTMLInputElement;
      if (searchInput) {
        searchInput.value = "";
        toggleClearButton(false);
      }
    });
  });
</script>
<style lang="scss">
  @use "sass:color";
  @use "../../styles/global" as *;

  .posts-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
  }

  .page-title {
    margin-bottom: 0;
    display: flex;
    align-items: center;
    gap: 0.75rem;
  }

  .title-word {
    transition: all 0.2s ease;
    opacity: 0.6;

    &.active {
      opacity: 1;
      text-shadow: 0 0 8px rgba(255, 255, 255, 0.1);
    }
  }

  .title-separator {
    opacity: 0.4;
    font-weight: 300;
  }

  .header-actions {
    display: flex;
    gap: 0.75rem;
    align-items: center;
  }

  .archive-link,
  .view-toggle,
  .content-toggle {
    @include button-base;
    @include icon-size(0.9rem);
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.9rem;
    color: color.scale($secondary, $lightness: -20%);
    background-color: transparent;

    &:hover {
      background-color: $button-bg;
      color: $secondary;
    }
  }

  .filters-container {
    margin-bottom: 1.5rem;
  }

  .search-container {
    margin-bottom: 1rem;

    form {
      position: relative;
      display: flex;
    }

    #search-input {
      @include input-base;
      flex: 1;
      padding-right: 2.5rem;
      font-size: 0.95rem;
      width: 100%;

      &::placeholder {
        color: $text-muted;
      }
    }

    .search-button {
      position: absolute;
      right: 0;
      top: 0;
      height: 100%;
      padding: 0 0.8rem;
      background: none;
      border: none;
      color: $text-muted;
      cursor: pointer;

      &:hover {
        color: $secondary;
      }

      :global(svg) {
        width: 0.9rem;
        height: 0.9rem;
      }
    }

    .clear-search {
      position: absolute;
      right: 2.5rem;
      top: 0;
      height: 100%;
      display: flex;
      align-items: center;
      padding: 0 0.5rem;
      background: none;
      border: none;
      color: $text-muted;
      cursor: pointer;
      text-decoration: none;

      &:hover {
        color: $secondary;
      }

      :global(svg) {
        width: 0.9rem;
        height: 0.9rem;
      }
    }
  }

  .tags-container {
    margin-bottom: 1rem;
  }

  .tags-wrap {
    display: none;
    flex-wrap: wrap;
    gap: 0.5rem;
    padding-bottom: 0.5rem;
  }
  .tags-wrap.visible {
    display: flex;
  }

  .tidbit-tags-wrap {
    display: none;
  }

  .post-tags-wrap {
    display: flex;
  }

  .tidbit-tags-wrap {
    display: none !important;
  }

  .tags-wrap .tag-filter {
    display: inline-block !important;
    padding: 0.3rem 0.8rem !important;
    border-radius: 4px !important;
    background-color: $button-bg !important;
    color: $text-muted !important;
    font-size: 0.85rem !important;
    text-decoration: none !important;
    transition: all 0.2s ease !important;
    margin-bottom: 0.5rem !important;
    border: none !important;
    cursor: pointer !important;
    font-family: inherit !important;
    box-sizing: border-box !important;

    &:hover {
      background-color: $button-bg-hover !important;
      color: $secondary !important;
    }

    &.active {
      background-color: $border-medium !important;
      color: $secondary !important;
      font-weight: 500 !important;
    }
  }

  .post-list,
  .post-list-all {
    padding: 0;
    margin: 0;
    width: 100%;
    list-style: none;
  }

  .no-results {
    text-align: center;
    padding: 3rem 2rem;
    background-color: $button-bg;
    border-radius: 6px;

    :global(.search-icon) {
      font-size: 2rem;
      opacity: 0.5;
      margin-bottom: 1rem;
      display: block;
      width: 2rem !important;
      height: 2rem !important;
      margin: 0 auto 1rem;
    }

    p {
      font-size: 1.1rem;
      margin-bottom: 1.5rem;
    }

    .reset-filters {
      display: inline-block;
      padding: 0.5rem 1rem;
      background-color: $button-bg;
      color: $secondary;
      text-decoration: none;
      border-radius: 4px;
      transition: all 0.2s ease;
      border: none;
      cursor: pointer;
      font-family: inherit;
      font-size: 1rem;

      &:hover {
        background-color: $button-bg-hover;
        transform: translateY(-1px);
      }
    }
  }

  @media (max-width: 768px) {
    .page-title {
      gap: 0.5rem;
      font-size: 1.8rem;
    }

    .header-actions {
      flex-direction: column;
      align-items: flex-end;
      gap: 0.5rem;
    }

    .archive-link,
    .view-toggle {
      font-size: 0.8rem;
      padding: 0.3rem 0.6rem;
    }
  }

  .tidbit-container {
    margin: 1.5rem 0;
  }
</style>

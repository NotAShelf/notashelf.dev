---
import Pagination from "@components/Pagination.svelte";
import {
  faArchive,
  faLayerGroup,
  faList,
  faMagnifyingGlass,
  faXmark,
} from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import BaseLayout from "@layouts/BaseLayout.astro";
import type { PostEntry } from "@lib/types";
import { getCollection } from "astro:content";

// Get all blog posts
const allPosts = await getCollection("posts");

// Extract all unique tags from posts
const allTags = [
  ...new Set(
    allPosts
      .filter((post: PostEntry) => !post.data.draft && !post.data.archived)
      .flatMap((post: PostEntry) => post.data.keywords || []),
  ),
].sort();

// Filter out draft and archived posts
const filteredPosts = allPosts
  .filter((post: PostEntry) => !post.data.draft && !post.data.archived)
  .sort(
    (a: PostEntry, b: PostEntry) =>
      new Date(b.data.date).getTime() - new Date(a.data.date).getTime(),
  );

// Calculate pagination
const postsPerPage = 5;
const totalPosts = filteredPosts.length;
const totalPages = Math.ceil(totalPosts / postsPerPage);
const currentPage = 1;
const posts = filteredPosts.slice(0, postsPerPage);
---

<BaseLayout title="Blog Posts" description="Collection of blog posts">
  <div class="posts-header">
    <h1 class="page-title">Blog Posts</h1>
    <div class="header-actions">
      <button
        id="view-toggle"
        class="view-toggle"
        title="Toggle view mode"
        aria-label="Toggle between paginated and all posts view"
      >
        <FontAwesomeIcon icon={faLayerGroup} id="pagination-icon" />
        <FontAwesomeIcon
          icon={faList}
          id="all-icon"
          style={{ display: "none" }}
        />
        <span id="view-label">View All</span>
      </button>
      <a href="/archive" class="archive-link">
        <FontAwesomeIcon icon={faArchive} /> View Archive
      </a>
    </div>
  </div>

  <div class="filters-container">
    <div class="search-container">
      <form id="search-form">
        <input
          type="text"
          name="q"
          id="search-input"
          placeholder="Search posts..."
          aria-label="Search posts"
        />
        <button type="submit" class="search-button" id="search-button">
          <FontAwesomeIcon icon={faMagnifyingGlass} />
        </button>
        <button
          type="button"
          class="clear-search"
          id="clear-search"
          style="display: none;"
        >
          <FontAwesomeIcon icon={faXmark} />
        </button>
      </form>
    </div>

    <div class="tags-container">
      <div class="tags-wrap">
        <button type="button" class="tag-filter" data-tag=""> All </button>

        {
          allTags.map((tag) => (
            <button type="button" class="tag-filter" data-tag={tag}>
              {tag}
            </button>
          ))
        }
      </div>
    </div>
  </div>

  <ul class="post-list">
    {
      posts.map((post: PostEntry) => (
        <li
          class="post-dropdown-item"
          data-keywords={post.data.keywords?.join(",")}
          data-post-id={post.id}
        >
          <a href={`/posts/${post.id}`} class="dropdown-link">
            <div class="post-content">
              <div class="post-header">
                <h2 class="post-title">{post.data.title}</h2>
                {post.data.keywords && post.data.keywords.length > 0 && (
                  <div class="post-tags">
                    {post.data.keywords.map((tag: string) => (
                      <span class="post-tag">{tag}</span>
                    ))}
                  </div>
                )}
              </div>
              <time datetime={post.data.date.toISOString()} class="post-date">
                {new Date(post.data.date).toLocaleDateString("en-US", {
                  year: "numeric",
                  month: "long",
                  day: "numeric",
                })}
              </time>
              {post.data.description && (
                <p class="post-description">{post.data.description}</p>
              )}
            </div>
          </a>
        </li>
      ))
    }
  </ul>

  <ul class="post-list-all" style="display: none;">
    {
      filteredPosts.map((post: PostEntry) => (
        <li
          class="post-dropdown-item"
          data-keywords={post.data.keywords?.join(",")}
          data-post-id={post.id}
        >
          <a href={`/posts/${post.id}`} class="dropdown-link">
            <div class="post-content">
              <div class="post-header">
                <h2 class="post-title">{post.data.title}</h2>
                {post.data.keywords && post.data.keywords.length > 0 && (
                  <div class="post-tags">
                    {post.data.keywords.map((tag: string) => (
                      <span class="post-tag">{tag}</span>
                    ))}
                  </div>
                )}
              </div>
              <time datetime={post.data.date.toISOString()} class="post-date">
                {new Date(post.data.date).toLocaleDateString("en-US", {
                  year: "numeric",
                  month: "long",
                  day: "numeric",
                })}
              </time>
              {post.data.description && (
                <p class="post-description">{post.data.description}</p>
              )}
            </div>
          </a>
        </li>
      ))
    }
  </ul>

  <div class="no-results" style="display: none;">
    <FontAwesomeIcon icon={faMagnifyingGlass} className="search-icon" />
    <p>No posts found matching your criteria</p>
    <button type="button" id="reset-filters" class="reset-filters">
      Reset filters
    </button>
  </div>

  <div id="pagination-container">
    <Pagination
      currentPage={currentPage}
      totalPages={totalPages}
      baseUrl="/posts"
      client:load
    />
  </div>
</BaseLayout>

<script>
  import type { PostEntry } from "../../lib/types";
  import { WasmPostSearchUI } from "../../scripts/wasm-post-search-ui";

  document.addEventListener("DOMContentLoaded", async () => {
    // Pass all posts data to the WASM search UI
    const allPosts: PostEntry[] = [];

    // Extract post data from DOM elements for WASM
    document.querySelectorAll(".post-dropdown-item").forEach((el) => {
      const element = el as HTMLElement;
      const postId = element.getAttribute("data-post-id");
      const title = element.querySelector(".post-title")?.textContent;
      const description =
        element.querySelector(".post-description")?.textContent;
      const keywords = element.getAttribute("data-keywords")?.split(",") || [];

      if (postId && title) {
        allPosts.push({
          id: postId,
          data: {
            title,
            description: description || "",
            keywords: keywords.filter((k) => k.trim() !== ""),
            date: new Date(), // Will be extracted from DOM if needed
            draft: false,
            archived: false,
          },
          body: "",
          collection: "posts",
        });
      }
    });

    // Initialize WASM search UI
    const searchUI = new WasmPostSearchUI(allPosts);
    await searchUI.init();
  });
</script>
<style lang="scss">
  @use "sass:color";
  @use "../../styles/global" as *;

  .posts-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
  }

  .page-title {
    margin-bottom: 0;
  }

  .header-actions {
    display: flex;
    gap: 0.75rem;
    align-items: center;
  }

  .archive-link,
  .view-toggle {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.9rem;
    color: color.scale($secondary, $lightness: -20%);
    text-decoration: none;
    padding: 0.4rem 0.8rem;
    border-radius: 4px;
    transition: all 0.2s ease;
    background-color: transparent;
    border: none;
    cursor: pointer;
    font-family: inherit;

    &:hover {
      background-color: $button-bg;
      color: $secondary;
    }

    :global(svg) {
      width: 0.9rem;
      height: 0.9rem;
    }
  }

  .filters-container {
    margin-bottom: 1.5rem;
  }

  .search-container {
    margin-bottom: 1rem;

    form {
      position: relative;
      display: flex;
    }

    #search-input {
      flex: 1;
      padding: 0.6rem 0.8rem;
      padding-right: 2.5rem;
      border-radius: 4px;
      background-color: $button-bg;
      border: 1px solid $border-light;
      color: $secondary;
      font-size: 0.95rem;
      transition: all 0.2s ease;
      width: 100%;

      &:focus {
        outline: none;
        background-color: $input-bg-focus;
        border-color: $border-medium;
      }

      &::placeholder {
        color: $text-muted;
      }
    }

    .search-button {
      position: absolute;
      right: 0;
      top: 0;
      height: 100%;
      padding: 0 0.8rem;
      background: none;
      border: none;
      color: $text-muted;
      cursor: pointer;

      &:hover {
        color: $secondary;
      }

      :global(svg) {
        width: 0.9rem;
        height: 0.9rem;
      }
    }

    .clear-search {
      position: absolute;
      right: 2.5rem;
      top: 0;
      height: 100%;
      display: flex;
      align-items: center;
      padding: 0 0.5rem;
      background: none;
      border: none;
      color: rgba(255, 255, 255, 0.7);
      cursor: pointer;
      text-decoration: none;

      &:hover {
        color: $secondary;
      }

      :global(svg) {
        width: 0.9rem;
        height: 0.9rem;
      }
    }
  }

  .tags-container {
    margin-bottom: 1rem;
  }

  .tags-wrap {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    padding-bottom: 0.5rem;
  }

  .tag-filter {
    display: inline-block;
    padding: 0.3rem 0.8rem;
    border-radius: 4px;
    background-color: rgba(255, 255, 255, 0.05);
    color: rgba(255, 255, 255, 0.7);
    font-size: 0.85rem;
    text-decoration: none;
    transition: all 0.2s ease;
    margin-bottom: 0.5rem;
    border: none;
    cursor: pointer;
    font-family: inherit;

    &:hover {
      background-color: rgba(255, 255, 255, 0.1);
      color: $secondary;
    }

    &.active {
      background-color: rgba(255, 255, 255, 0.15);
      color: $secondary;
      font-weight: 500;
    }
  }

  .post-list,
  .post-list-all {
    padding: 0;
    margin: 0;
    width: 100%;
    list-style: none;
  }

  .post-dropdown-item {
    background-color: color.scale($primary, $lightness: 6%);
    list-style: none;
    padding: 12px 16px;
    border: 1px solid color.scale($primary, $lightness: -1%);
    border-radius: 6px;
    margin: 12px 0;
    width: 100%;
    height: 140px;
    display: flex;
    overflow: hidden;
    transition:
      background-color 0.15s ease-out,
      transform 0.1s ease-out;

    &:hover {
      cursor: pointer;
      color: color.scale($secondary, $lightness: -4%);
      background-color: color.scale($primary, $lightness: 9%);
      transform: translateY(-1px);
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
  }

  .dropdown-link {
    display: block;
    text-decoration: none;
    width: 100%;
    color: $secondary;

    &:visited {
      color: $secondary;
    }
  }

  .post-content {
    display: flex;
    flex-direction: column;
    width: 100%;
    height: 100%;
  }

  .post-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 4px;
    width: 100%;
  }

  .post-title {
    font-size: 1.2em;
    font-weight: bold;
    margin: 0;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    flex: 1;
  }

  .post-date {
    font-size: 0.75em;
    color: color.scale($secondary, $lightness: -20%);
    margin: 0 0 8px 0;
    display: block;
  }

  .post-description {
    font-size: 0.85em;
    color: color.scale($secondary, $lightness: -10%);
    margin: 0;
    line-height: 1.4;
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
    flex: 1;
  }

  .post-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 6px;
    margin-left: 12px;
  }

  .post-tag {
    font-size: 0.7rem;
    background: rgba(255, 255, 255, 0.1);
    padding: 2px 8px;
    border-radius: 3px;
  }

  .no-results {
    text-align: center;
    padding: 3rem 2rem;
    background-color: rgba(255, 255, 255, 0.03);
    border-radius: 6px;

    :global(.search-icon) {
      font-size: 2rem;
      opacity: 0.5;
      margin-bottom: 1rem;
      display: block;
      width: 2rem !important;
      height: 2rem !important;
      margin: 0 auto 1rem;
    }

    p {
      font-size: 1.1rem;
      margin-bottom: 1.5rem;
    }

    .reset-filters {
      display: inline-block;
      padding: 0.5rem 1rem;
      background-color: rgba(255, 255, 255, 0.1);
      color: $secondary;
      text-decoration: none;
      border-radius: 4px;
      transition: all 0.2s ease;
      border: none;
      cursor: pointer;
      font-family: inherit;
      font-size: 1rem;

      &:hover {
        background-color: rgba(255, 255, 255, 0.15);
        transform: translateY(-1px);
      }
    }
  }

  @media (max-width: 768px) {
    .header-actions {
      flex-direction: column;
      align-items: flex-end;
      gap: 0.5rem;
    }

    .archive-link,
    .view-toggle {
      font-size: 0.8rem;
      padding: 0.3rem 0.6rem;
    }
  }
</style>

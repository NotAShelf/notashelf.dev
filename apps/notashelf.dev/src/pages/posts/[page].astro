---
import Pagination from "@components/Pagination.astro";
import PostList from "@components/PostList.astro";
import BaseLayout from "@layouts/BaseLayout.astro";
import type { PostEntry } from "@lib/types";
import { Icon } from "astro-icon/components";
import { getCollection } from "astro:content";

// Define the paths that will be generated
export async function getStaticPaths() {
  const allPosts = await getCollection("posts");
  const filteredPosts = allPosts
    .filter((post: PostEntry) => !post.data.draft && !post.data.archived)
    .sort(
      (a: PostEntry, b: PostEntry) =>
        new Date(b.data.date).getTime() - new Date(a.data.date).getTime(),
    );

  const postsPerPage = 5;
  const totalPages = Math.ceil(filteredPosts.length / postsPerPage);

  // Generate pages starting from page 2 (page 1 is handled by index.astro)
  return Array.from({ length: totalPages - 1 }).map((_, i) => {
    const pageNum = i + 2; // Start from page 2
    return {
      params: { page: pageNum.toString() },
      props: {
        page: pageNum,
        posts: filteredPosts.slice(
          (pageNum - 1) * postsPerPage,
          pageNum * postsPerPage,
        ),
        totalPosts: filteredPosts.length,
        allPosts: filteredPosts,
      },
    };
  });
}

// Get parameters from the route
const { page: currentPage, posts, totalPosts, allPosts } = Astro.props;
const postsPerPage = 5;
const totalPages = Math.ceil(totalPosts / postsPerPage);

// Extract all unique tags from existing allPosts prop
const allTags = [
  ...new Set(
    allPosts.flatMap(
      (post: PostEntry) => (post.data.keywords || []) as string[],
    ),
  ),
].sort() as string[];
---

<BaseLayout title="Blog Posts" description="Collection of blog posts">
  <div class="posts-header">
    <h1 class="page-title">Blog Posts</h1>
    <div class="header-actions">
      <button
        id="view-toggle"
        class="view-toggle"
        title="Toggle view mode"
        aria-label="Toggle between paginated and all posts view"
      >
        <Icon name="layer-group" id="pagination-icon" />
        <Icon name="list" id="all-icon" style={{ display: "none" }} />
        <span id="view-label">View All</span>
      </button>
      <a href="/archive" class="archive-link">
        <Icon name="box-archive" /> View Archive
      </a>
    </div>
  </div>

  <div class="filters-container">
    <div class="search-container">
      <form id="search-form">
        <input
          type="text"
          name="q"
          id="search-input"
          placeholder="Search posts..."
          aria-label="Search posts"
        />
        <button type="submit" class="search-button" id="search-button">
          <Icon name="search" />
        </button>
        <button
          type="button"
          class="clear-search"
          id="clear-search"
          style="display: none;"
        >
          <Icon name="xmark" />
        </button>
      </form>
    </div>

    <div class="tags-container">
      <div class="tags-wrap">
        <button type="button" class="tag-filter" data-tag=""> All </button>

        {
          allTags.map((tag) => (
            <button type="button" class="tag-filter" data-tag={tag}>
              {tag}
            </button>
          ))
        }
      </div>
    </div>
  </div>

  <PostList posts={posts} className="post-list" />

  <PostList posts={allPosts} className="post-list-all" style="display: none;" />

  <div class="no-results" style="display: none;">
    <Icon name="search" class="search-icon" />
    <p>No posts found matching your criteria</p>
    <button type="button" id="reset-filters" class="reset-filters">
      Reset filters
    </button>
  </div>

  <div id="pagination-container">
    <Pagination
      currentPage={currentPage}
      totalPages={totalPages}
      baseUrl="/posts"
    />
  </div>
</BaseLayout>

<script>
  import type { PostEntry } from "../../lib/types";
  import { WasmPostSearchUI } from "../../scripts/wasm-post-search-ui";

  document.addEventListener("DOMContentLoaded", async () => {
    // Pass all posts data to the WASM search UI
    const allPosts: PostEntry[] = [];

    // Extract post data from DOM elements for WASM
    document.querySelectorAll(".post-dropdown-item").forEach((el) => {
      const element = el as HTMLElement;
      const postId = element.getAttribute("data-post-id");
      const title = element.querySelector(".post-title")?.textContent;
      const description =
        element.querySelector(".post-description")?.textContent;
      const timeElement = element.querySelector(".post-date");
      const keywords = element.getAttribute("data-keywords")?.split(",") || [];

      // Extract actual date from the datetime attribute or fallback gracefully
      let postDate = new Date();
      if (timeElement) {
        const datetimeAttr = timeElement.getAttribute("datetime");
        if (datetimeAttr) {
          const parsedDate = new Date(datetimeAttr);
          // Only use parsed date if it's valid
          if (!isNaN(parsedDate.getTime())) {
            postDate = parsedDate;
          }
        }
      }

      if (postId && title) {
        allPosts.push({
          id: postId,
          data: {
            title,
            description: description || "",
            keywords: keywords.filter((k) => k.trim() !== ""),
            date: postDate,
            draft: false,
            archived: false,
          },
          body: "",
          collection: "posts",
        });
      }
    });

    // Initialize WASM search UI
    const searchUI = new WasmPostSearchUI(allPosts);
    await searchUI.init();
  });
</script>

<style lang="scss">
  @use "sass:color";
  @use "../../styles/global" as *;

  .posts-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
  }

  .page-title {
    margin-bottom: 0;
  }

  .header-actions {
    display: flex;
    gap: 0.75rem;
    align-items: center;
  }

  .archive-link,
  .view-toggle {
    @include button-base;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.9rem;
    color: color.scale($secondary, $lightness: -20%);
    background-color: transparent;

    &:hover {
      background-color: $button-bg;
      color: $secondary;
    }

    @include icon-size(0.9rem);
  }

  .filters-container {
    margin-bottom: 1.5rem;
  }

  .search-container {
    margin-bottom: 1rem;

    form {
      position: relative;
      display: flex;
    }

    #search-input {
      @include input-base;
      flex: 1;
      padding-right: 2.5rem;
      font-size: 0.95rem;
      width: 100%;

      &::placeholder {
        color: $text-muted;
      }
    }

    .search-button {
      position: absolute;
      right: 0;
      top: 0;
      height: 100%;
      padding: 0 0.8rem;
      background: none;
      border: none;
      color: $text-muted;
      cursor: pointer;

      &:hover {
        color: $secondary;
      }

      @include icon-size(0.9rem);
    }

    .clear-search {
      position: absolute;
      right: 2.5rem;
      top: 0;
      height: 100%;
      display: flex;
      align-items: center;
      padding: 0 0.5rem;
      background: none;
      border: none;
      color: $text-muted;
      cursor: pointer;
      text-decoration: none;

      &:hover {
        color: $secondary;
      }

      @include icon-size(0.9rem);
    }
  }

  .tags-container {
    margin-bottom: 1rem;
  }

  .tags-wrap {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    padding-bottom: 0.5rem;
  }

  .tag-filter {
    @include button-base;
    display: inline-block;
    padding: 0.3rem 0.8rem;
    color: $text-muted;
    font-size: 0.85rem;
    margin-bottom: 0.5rem;
    background-color: $button-bg;

    &:hover {
      background-color: $border-light;
      color: $secondary;
    }

    &.active {
      background-color: $border-medium;
      color: $secondary;
      font-weight: 500;
    }
  }

  .post-list,
  .post-list-all {
    padding: 0;
    margin: 0;
    width: 100%;
    list-style: none;
  }

  .post-dropdown-item {
    @include interactive-card;
    background-color: color.scale($primary, $lightness: 6%);
    list-style: none;
    padding: 12px 16px;
    border: 1px solid color.scale($primary, $lightness: -1%);
    border-radius: 6px;
    margin: 12px 0;
    width: 100%;
    height: 140px;
    display: flex;
    overflow: hidden;

    &:hover {
      cursor: pointer;
      color: color.scale($secondary, $lightness: -4%);
      background-color: color.scale($primary, $lightness: 9%);
    }
  }

  .dropdown-link {
    display: block;
    text-decoration: none;
    width: 100%;
    color: $secondary;

    &:visited {
      color: $secondary;
    }
  }

  .post-content {
    display: flex;
    flex-direction: column;
    width: 100%;
    height: 100%;
  }

  .post-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 4px;
    width: 100%;
  }

  .post-title {
    font-size: 1.2em;
    font-weight: bold;
    margin: 0;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    flex: 1;
  }

  .post-date {
    font-size: 0.75em;
    color: color.scale($secondary, $lightness: -20%);
    margin: 0 0 8px 0;
    display: block;
  }

  .post-description {
    font-size: 0.85em;
    color: color.scale($secondary, $lightness: -10%);
    margin: 0;
    line-height: 1.4;
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
    flex: 1;
  }

  .post-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 6px;
    margin-left: 12px;
  }

  .post-tag {
    font-size: 0.7rem;
    background: $border-light;
    padding: 2px 8px;
    border-radius: 3px;
  }

  .no-results {
    text-align: center;
    padding: 3rem 2rem;
    background-color: $button-bg;
    border-radius: 6px;

    :global(.search-icon) {
      font-size: 2rem;
      opacity: 0.5;
      margin-bottom: 1rem;
      display: block;
      width: 2rem !important;
      height: 2rem !important;
      margin: 0 auto 1rem;
    }

    p {
      font-size: 1.1rem;
      margin-bottom: 1.5rem;
    }

    .reset-filters {
      display: inline-block;
      padding: 0.5rem 1rem;
      background-color: $button-bg;
      color: $secondary;
      text-decoration: none;
      border-radius: 4px;
      transition: all 0.2s ease;
      border: none;
      cursor: pointer;
      font-family: inherit;
      font-size: 1rem;

      &:hover {
        background-color: $button-bg-hover;
        transform: translateY(-1px);
      }
    }
  }

  @media (max-width: 768px) {
    .header-actions {
      flex-direction: column;
      align-items: flex-end;
      gap: 0.5rem;
    }

    .archive-link,
    .view-toggle {
      font-size: 0.8rem;
      padding: 0.3rem 0.6rem;
    }
  }
</style>
